---
import Layout from "../layouts/Layout.astro";

export const prerender = false;
---

<Layout
  description={`Søk etter oppskrifter`}
  tab_title={`Søk etter oppskrifter`}
>
  <aside
    class="border-2 border-solid border-black w-fit px-8 py-4 rounded-lg grid"
  >
    <div class="flex flex-col">
      <label for="search" class="font-bold text-lg">Søk etter oppskrift</label>
      <span>Søk etter tittelen på oppskrift</span>
    </div>
    <input
      class="border-2 border-solid border-black rounded-lg px-4 py-2 text-lg text-gray-800 focus:outline-none focus:ring focus:border-blue-300"
      type="search"
      name="search"
      id="search"
      min="1"
      max="40"
      placeholder="Skriv her"
      required
    />
  </aside>
  <p id="searchReadOut"></p>
  <section aria-label="Search Reults">
    <ul id="searchResult"></ul>
  </section>
</Layout>

<script>
  import Fuse from "fuse.js";

  // selectors
  const search = document.querySelector("#search") as HTMLInputElement;
  const searchReadOut = document.querySelector(
    "#searchReadOut"
  ) as HTMLAnchorElement;
  const resultsList = document.querySelector(
    "#searchResult"
  ) as HTMLUListElement;

  let SEARCH_DATA: any;
  let FUSE_INSTANCE: any;

  const FUSE_OPTIONS = {
    includeScore: true,
    shouldSort: true,
    threshold: 0.4,
    keys: [
      {
        name: "slug",
        weight: 0.6,
      },
      {
        name: "title",
        weight: 0.7,
      },
      {
        name: "ingredienser",
        weight: 0.4,
      },
      {
        name: "tattFra?",
        weight: 0.2,
      },
    ],
  };

  const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#000000" viewBox="0 0 256 256" id="spinner"><path d="M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"></path><style>
				#spinner {
					animation: spin 1s linear infinite;
				}
				@keyframes spin {
					100% {
						transform: rotate(360deg);
					}
				}
				</style></svg>`;

  async function fetchSearchResult(search: string) {
    if (search.length === 0) return;
    resultsList.innerHTML = SPINNER;
    if (!SEARCH_DATA) {
      try {
        const res = await fetch("/search.json");
        if (!res.ok) {
          throw new Error("Something went wrong");
        }
        const data = await res.json();
        SEARCH_DATA = data;
      } catch (err) {
        console.error(err);
      }
    }
    if (SEARCH_DATA && !FUSE_INSTANCE) {
      FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
    }
    if (!FUSE_INSTANCE) return;

    const searchResult = FUSE_INSTANCE.search(search);
    //console.log("res: ", searchResult);
    resultsList.innerHTML =
      searchResult.length > 0
        ? generateSearchList(searchResult)
        : "Ingen resultater";
  }

  type RecipeSearchResultItem = {
    item: {
      slug: string;
      title: string;
      ingredienser: string[];
      tattFra?: string;
    };
    refIndex: number;
    score: number;
  };

  function generateSearchList(results: any) {
    return results
      .map((res: RecipeSearchResultItem) => {
        console.log("searchRes: ", res);
        const { slug, title } = res.item;
        return `<li class="text-lg font-semibold active:underline hover:underline rounded-full px-4 py-2 truncate">
                <a href="/oppskrifter/${slug}">${title}</a>
                </li>`;
      })
      .join("");
  }

  // functions
  function updateDocumentTitle(search: string) {
    document.title = search
      ? `Søkeresultater for "${search}""`
      : "Søk etter oppskrift";
  }

  function updateSearchReadOut(search: string) {
    searchReadOut.textContent = search ? `Søkeresultater for "${search}"` : "";
  }

  function updateSearchPageUrl(search: string) {
    const url = new URL(window.location.href);
    url.searchParams.set("q", search);
    window.history.replaceState(null, "", search);
  }

  // event listeners
  window.addEventListener("DOMContentLoaded", () => {
    const urlParams = new URLSearchParams(window.location.search).get(
      "q"
    ) as string; // TODO: better handling of null
    updateDocumentTitle(urlParams);
    fetchSearchResult(urlParams);
    updateSearchReadOut(urlParams);
    search.value = urlParams;
    search.focus();
  });

  window.addEventListener("input", () => {
    const searchTerm = search.value;
    updateDocumentTitle(searchTerm);
    updateSearchReadOut(searchTerm);
    fetchSearchResult(searchTerm);
    updateSearchPageUrl(searchTerm);
  });
</script>
